import config
from telegram import ReplyKeyboardMarkup as tg_RKM
from telegram import InlineKeyboardMarkup as tg_IKM
from telegram import InlineKeyboardButton as tg_IKB
from telegram import KeyboardButton as tg_KB
from telegram import ReplyKeyboardRemove as tg_ReplyKeyboardRemove


def get_poll_keyboard(post_id: int, likes_count: int, dislikes_count: int,
                      pattern: str = 'vote') -> tg_IKM:
    """
    This is keyboard for appending to the post and voting.
    TG can accept only str callback data. Like = +post_id, dislike = -post_id.
    :rtype: object
    """
    return tg_IKM([[
        tg_IKB(text=f'üëé {dislikes_count}', callback_data=f'{pattern} -{post_id}'),
        tg_IKB(text=f'üëç {likes_count}', callback_data=f'{pattern} +{post_id}'), ]])


emoji_checkboxes = ['üî≤', '‚òë']


class EmojiCheckboxes:
    checked = '‚òë'
    unchecked = 'üî≤'

    @staticmethod
    def toggle_checkbox(keyboard, keyboard_button, old_flag):
        x, y = keyboard_button['button_keyboard_index'], keyboard_button['button_row_index']
        keyboard[x][y].callback_data = f"{keyboard_button['button'].callback_data.replace(old_flag, not old_flag)}"
        keyboard[x][y].text = f"{keyboard_button['button'].text.replace(old_flag, not old_flag)}"
        return keyboard


# COMMON KEYBOARDS THAT NO REQUIRES ARGUMENTS'
keyboard_start = tg_RKM(
    [['/start']],
    resize_keyboard=True,
    one_time_keyboard=True)

keyboard_reg = tg_RKM([['/reg']], resize_keyboard=True, one_time_keyboard=True)
keyboard_go_or_cancel = tg_RKM(keyboard=[['–ü–æ–µ—Ö–∞–ª–∏'], ['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True, one_time_keyboard=True)
keyboard_for_post = tg_RKM(keyboard=[['–û—Ç–ø—Ä–∞–≤–∏—Ç—å'], ['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True, one_time_keyboard=True)

original_photo_keyboard = tg_RKM(
    keyboard=[['–ì–æ—Ç–æ–≤–æ'], ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'], ['–ù–∞–∑–∞–¥'], ['–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
before_using_account_photos = tg_RKM(
    keyboard=[['–ì–æ—Ç–æ–≤–æ'], ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'], ['–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'], ['–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
after_using_account_photos = tg_RKM(
    keyboard=[['–ì–æ—Ç–æ–≤–æ'], ['–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'], ['–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)

keyboard_for_start = tg_RKM(keyboard=[['–ü–æ–µ—Ö–∞–ª–∏!'], ['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True, one_time_keyboard=True)
keyboard_for_user_name = lambda name: tg_RKM(
    keyboard=[[f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ ("{name}")'], ['–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
keyboard_for_user_goal = tg_RKM(
    keyboard=[['–û–±—â–∞—Ç—å—Å—è', '–ó–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'], ['–û–±—â–∞—Ç—å—Å—è –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'], ['–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
keyboard_for_user_gender = tg_RKM(
    keyboard=[['–Ø –¥–µ–≤—É—à–∫–∞', '–Ø –ø–∞—Ä–µ–Ω—å'], ['–ù–∞–∑–∞–¥'], ['–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
keyboard_for_user_age = standard_keyboard = tg_RKM(
    keyboard=[['–ù–∞–∑–∞–¥'], ['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True, one_time_keyboard=True)
keyboard_for_user_location = tg_RKM(
    keyboard=[[tg_KB(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)], ['–ù–∞–∑–∞–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'], ['–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
keyboard_for_user_confirm = tg_RKM(
    keyboard=[['–ù–∞–∑–∞–¥', '–ó–∞–≤–µ—Ä—à–∏—Ç—å'], ['–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)

keyboard_for_match_goal = tg_RKM(
    keyboard=[['–•–æ—á—É –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è', '–•–æ—á—É –æ–±—â–∞—Ç—å—Å—è'], ['–û–±—â–∞—Ç—å—Å—è –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'], ['–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
keyboard_for_match_gender = tg_RKM(
    keyboard=[['–ü–∞—Ä–µ–Ω—å', '–î–µ–≤—É—à–∫–∞'], ['–õ—é–±–æ–π –ø–æ–ª'], ['–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
keyboard_for_match_age = tg_RKM(
    keyboard=[['–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç'], ['–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)

# keyboard_for_new_search = tg_RKM(
#     keyboard=[['–ù–æ–≤—ã–π –ø–æ–∏—Å–∫'], ['–ó–∞–≤–µ—Ä—à–∏—Ç—å']],
#     resize_keyboard=True, one_time_keyboard=True)
keyboard_for_votes = tg_RKM(  # Not in use
    keyboard=[['–û—Ü–µ–Ω–∏—Ç—å –ø–æ—Å—Ç—ã', '–û—Ç–º–µ–Ω–∞']],
    resize_keyboard=True, one_time_keyboard=True)
keyboard_for_one_more_match = tg_RKM(
    keyboard=[['–ï—â–µ'], ['–ó–∞–≤–µ—Ä—à–∏—Ç—å']],
    resize_keyboard=True, one_time_keyboard=True)

remove_keyboard = tg_ReplyKeyboardRemove


def keyboard_for_additional_filters(len_all_matches: int, len_new_matches: int, checkboxes: dict = None):
    rows_buttons = [
        [tg_IKB(text='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã', callback_data=f'checkboxes show True')],
        [tg_IKB(text=f'–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö ({len_all_matches})', callback_data=f'checkboxes all True')],
        [tg_IKB(text=f'–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã—Ö ({len_new_matches})', callback_data=f'checkboxes new True')]
    ]
    if not checkboxes:  # checkboxes as indicator to add hidden buttons
        return
    emojis = {checkbox: emoji_checkboxes[1] if flag else emoji_checkboxes[0] for checkbox, flag in checkboxes}
    flags = {checkbox: True if flag else False for checkbox, flag in checkboxes}
    btn_1 = tg_IKB(text=f"–°–∫—Ä—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data=f'checkboxes hide True')
    btn_2 = tg_IKB(text=f"{emojis['age']} –í–æ–∑—Ä–∞—Å—Ç —É–∫–∞–∑–∞–Ω", callback_data=f"checkboxes age {checkboxes['age']}"),
    btn_3 = tg_IKB(text=f"{emojis['country']} –°—Ç—Ä–∞–Ω–∞ —É–∫–∞–∑–∞–Ω–∞", callback_data=f"checkboxes country {flags['country']}")
    btn_4 = tg_IKB(text=f"{emojis} –ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω  ", callback_data=f"checkboxes city {flags['city']}")
    btn_5 = tg_IKB(text=f"{emojis} –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π", callback_data=f"checkboxes photo {flags['photo']}")
    btn_6 = [tg_IKB(text=f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data=f'checkboxes apply True')]
    return tg_IKM([btn_1, [btn_2, btn_3], [btn_4, btn_5], btn_6])


def keyboard_for_show_matches(len_all_matches, len_new_matches):
    return tg_RKM(
        keyboard=[[f"–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö ({len_all_matches})", f"–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã—Ö ({len_new_matches})"],
                  ['–ù–∞–∑–∞–¥'], ['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True, one_time_keyboard=True)
